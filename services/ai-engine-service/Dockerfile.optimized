# syntax=docker/dockerfile:1.7-labs
# Optimized multi-stage build for ai-engine-service
# Reduces build time from 30min to <5min with BuildKit cache

# ==================== BASE IMAGES ====================
ARG PYTHON_VERSION=3.11
ARG BASE_IMAGE=python:${PYTHON_VERSION}-slim

# ==================== BUILDER STAGE ====================
FROM ${BASE_IMAGE} as builder

# Build-time optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=0 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system dependencies - cache layer
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    gcc \
    build-essential \
    libmagic-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy pip configuration early for caching
COPY services/ai-engine-service/pip.conf /etc/pip.conf

# Upgrade pip with cache
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel

# ==================== DEPENDENCY OPTIMIZATION ====================
WORKDIR /build

# Copy only dependency files first (better caching)
COPY pyproject.toml poetry.lock* ./
COPY services/ai-engine-service/requirements.txt ./

# Pre-download and build wheels with advanced caching
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/build/pip-cache \
    pip wheel --wheel-dir /build/wheels \
    --cache-dir /build/pip-cache \
    -r requirements.txt

# ==================== RUNTIME STAGE ====================
FROM ${BASE_IMAGE} as runtime

# Runtime optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH="/home/appuser/.local/bin:$PATH" \
    PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random

# Install runtime dependencies with cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    --no-install-recommends \
    ca-certificates \
    libmagic1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser

# Create app structure
WORKDIR /app
RUN chown appuser:appuser /app
USER appuser

# ==================== DEPENDENCY INSTALLATION ====================
# Copy wheels and requirements from builder stage
COPY --from=builder --chown=appuser:appuser /build/wheels /tmp/wheels
COPY --from=builder --chown=appuser:appuser /build/requirements.txt /tmp/

# Install dependencies from pre-built wheels with cache
RUN --mount=type=cache,target=/home/appuser/.cache/pip,uid=1000,gid=1000 \
    pip install --user --no-deps --find-links /tmp/wheels \
    $(grep -v '^#' /tmp/requirements.txt | tr '\n' ' ') && \
    rm -rf /tmp/wheels /tmp/requirements.txt

# ==================== APPLICATION LAYER ====================
# Copy application files in optimal order (most stable first)
COPY --chown=appuser:appuser shared/ /app/shared/
COPY --chown=appuser:appuser services/ai-engine-service/app/ /app/app/
COPY --chown=appuser:appuser scripts/wait-for-services.py /app/wait-for-services.py

# Copy healthcheck script with proper permissions
USER root
COPY --chown=root:root scripts/healthcheck.py /usr/local/bin/healthcheck.py
RUN chmod +x /usr/local/bin/healthcheck.py
USER appuser

# ==================== RUNTIME CONFIGURATION ====================
EXPOSE 8003

# Optimized health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD ["python3", "/usr/local/bin/healthcheck.py"]

# Optimized startup with shorter timeout for dependencies
CMD ["sh", "-c", "python3 /app/wait-for-services.py postgres:tcp://postgres:5432 redis:tcp://redis:6379 ollama:tcp://ollama:11434 chromadb:tcp://chromadb:8000 --timeout 120 --verbose && exec uvicorn app.main:app --host 0.0.0.0 --port 8003 --workers 1 --access-log --log-level info"]