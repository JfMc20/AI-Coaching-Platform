"""Autogenerate Creator Hub tables from SQLAlchemy models

Revision ID: 003
Revises: 001
Create Date: 2025-01-16 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '003'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('conversations',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('creator_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('message_count', sa.Integer(), nullable=False),
    sa.Column('satisfaction_rating', sa.Integer(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('conversation_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_message_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("message_count >= 0", name='valid_message_count'),
    sa.CheckConstraint("satisfaction_rating IS NULL OR (satisfaction_rating >= 1 AND satisfaction_rating <= 5)", name='valid_rating'),
    sa.CheckConstraint("status IN ('active', 'paused', 'completed', 'archived')", name='valid_conversation_status'),
    sa.ForeignKeyConstraint(['creator_id'], ['creators.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_conversations_created_at', 'conversations', ['created_at'], unique=False)
    op.create_index('idx_conversations_creator_id', 'conversations', ['creator_id'], unique=False)
    op.create_index('idx_conversations_last_message', 'conversations', ['last_message_at'], unique=False)
    op.create_index('idx_conversations_status', 'conversations', ['status'], unique=False)
    
    op.create_table('documents',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('creator_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('document_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('chunk_count', sa.Integer(), nullable=False),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('embeddings_stored', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('chunk_count >= 0', name='valid_chunk_count'),
    sa.CheckConstraint("processing_time IS NULL OR processing_time >= 0", name='valid_processing_time'),
    sa.CheckConstraint("status IN ('uploading', 'processing', 'completed', 'failed', 'archived')", name='valid_document_status'),
    sa.ForeignKeyConstraint(['creator_id'], ['creators.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_documents_created_at', 'documents', ['created_at'], unique=False)
    op.create_index('idx_documents_creator_id', 'documents', ['creator_id'], unique=False)
    op.create_index('idx_documents_creator_status', 'documents', ['creator_id', 'status'], unique=False)
    op.create_index('idx_documents_status', 'documents', ['status'], unique=False)
    
    op.create_table('widget_configurations',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('creator_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('welcome_message', sa.Text(), nullable=False),
    sa.Column('placeholder_text', sa.String(length=200), nullable=False),
    sa.Column('enable_file_upload', sa.Boolean(), nullable=False),
    sa.Column('enable_voice_input', sa.Boolean(), nullable=False),
    sa.Column('allowed_domains', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('rate_limit_messages', sa.Integer(), nullable=False),
    sa.Column('track_analytics', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('rate_limit_messages > 0 AND rate_limit_messages <= 100', name='valid_rate_limit'),
    sa.ForeignKeyConstraint(['creator_id'], ['creators.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_widget_configs_active', 'widget_configurations', ['is_active'], unique=False)
    op.create_index('idx_widget_configs_creator_id', 'widget_configurations', ['creator_id'], unique=False)
    
    # Enable Row Level Security (RLS) for all new tables
    op.execute("ALTER TABLE documents ENABLE ROW LEVEL SECURITY")
    op.execute("ALTER TABLE widget_configurations ENABLE ROW LEVEL SECURITY")  
    op.execute("ALTER TABLE conversations ENABLE ROW LEVEL SECURITY")
    
    # Create RLS policies for multi-tenant isolation
    op.execute("""
        CREATE POLICY documents_tenant_isolation ON documents
        USING (creator_id::text = current_setting('app.current_creator_id', true))
        WITH CHECK (creator_id::text = current_setting('app.current_creator_id', true))
    """)
    
    op.execute("""
        CREATE POLICY widget_configurations_tenant_isolation ON widget_configurations
        USING (creator_id::text = current_setting('app.current_creator_id', true))
        WITH CHECK (creator_id::text = current_setting('app.current_creator_id', true))
    """)
    
    op.execute("""
        CREATE POLICY conversations_tenant_isolation ON conversations
        USING (creator_id::text = current_setting('app.current_creator_id', true))
        WITH CHECK (creator_id::text = current_setting('app.current_creator_id', true))
    """)
    
    # Create or update updated_at trigger function
    op.execute("""
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = now();
            RETURN NEW;
        END;
        $$ language 'plpgsql';
    """)
    
    # Create triggers for updated_at columns
    op.execute("""
        CREATE TRIGGER update_documents_updated_at 
        BEFORE UPDATE ON documents 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)
    
    op.execute("""
        CREATE TRIGGER update_widget_configurations_updated_at 
        BEFORE UPDATE ON widget_configurations 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)
    
    op.execute("""
        CREATE TRIGGER update_conversations_updated_at 
        BEFORE UPDATE ON conversations 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop triggers
    op.execute("DROP TRIGGER IF EXISTS update_conversations_updated_at ON conversations")
    op.execute("DROP TRIGGER IF EXISTS update_widget_configurations_updated_at ON widget_configurations")
    op.execute("DROP TRIGGER IF EXISTS update_documents_updated_at ON documents")
    
    # Drop tables (cascade will handle policies and indexes)
    op.drop_table('widget_configurations')
    op.drop_table('documents')
    op.drop_table('conversations')
    # ### end Alembic commands ###