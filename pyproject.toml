[tool.poetry]
name = "mvp-coaching-workspace"
version = "0.0.0"
description = "Multi-Channel Proactive Coaching Platform - Poetry Workspace"
authors = ["MVP Team <team@mvp-coaching.com>"]
packages = [{ include = "shared" }, { include = "services" }]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.0"
# asyncpg = "^0.29.0"  # Requires C++ build tools, will use Docker
redis = "^5.0.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
alembic = "^1.12.0"
websockets = "^12.0"
aiofiles = "^23.2.0"
python-dotenv = "^1.0.0"
python-magic = "^0.4.27"
PyPDF2 = "^3.0.1"
python-docx = "^1.1.0"
markdown = "^3.5.0"
# chromadb = "^0.4.15"  # Requires C++ build tools, will use Docker
httpx = "^0.25.2"

pydantic = {extras = ["email"], version = "^2.5.0"}
pydantic-settings = "^2.0.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
bleach = "^6.1.0"
argon2-cffi = "^23.1.0"
aiohttp = "^3.9.0"
aiosqlite = "^0.19.0"
psycopg2-binary = "^2.9.0"
asyncpg = "^0.29.0"
chromadb = "^0.4.15"
ollama = "^0.1.7"
numpy = "^1.25.2"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-exporter-jaeger = "^1.21.0"
opentelemetry-exporter-jaeger-thrift = "^1.21.0"
opentelemetry-instrumentation-httpx = "^0.42b0"
opentelemetry-instrumentation-redis = "^0.42b0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
prometheus-client = "^0.19.0"
cryptography = "^45.0.6"
# shared directory is now just a regular Python package

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.0"
pytest-asyncio = ">=0.23.0"
pytest-cov = ">=5.0.0"
httpx = ">=0.27.0"
fakeredis = ">=2.22.0"
black = ">=24.0.0"
isort = ">=5.12.0"
flake8 = ">=7.0.0"
mypy = ">=1.9.0"
types-redis = "^4.6.0"
testcontainers = {extras = ["postgresql"], version = ">=4.0.0"}
pre-commit = ">=3.5"

# No workspace members - everything consolidated in root

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ===================================================================
#  CODE STYLE & LINTING
# ===================================================================
[tool.black]
line-length = 100
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 100

# ===================================================================
#  COVERAGE CONFIGURATION
# ===================================================================
[tool.coverage.run]
# Specify source directories to track coverage
source = ["shared", "services"]

# Files to omit from coverage tracking
omit = [
    "*/tests/*",
    "*/test_*",
    "*_test.py",
    "*/migrations/*",
    "*/alembic/*",
    "*/conftest.py",
    "*/__init__.py",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/.git/*",
    "*/build/*",
    "*/dist/*",
    "*/.pytest_cache/*",
    "*/__pycache__/*"
]

# Enable branch coverage tracking
branch = true

# Enable parallel coverage for concurrent test execution
parallel = true

# Include patterns for source files
include = [
    "shared/*",
    "services/*"
]

[tool.coverage.report]
# Lines to exclude from coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "pass",
    "\\.\\.\\."
]

# Show missing lines in terminal report
show_missing = true

# Don't skip files with 100% coverage
skip_covered = false

# Precision for coverage percentages
precision = 2

# Sort coverage report by coverage percentage
sort = "Cover"

[tool.coverage.html]
# HTML report output directory
directory = "htmlcov"

# Title for HTML coverage report
title = "MVP Coaching Platform Coverage Report"

# Show contexts in HTML report
show_contexts = true

[tool.coverage.xml]
# XML report output file
output = "coverage.xml"

