name: CI Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Security and code quality checks
  security-checks:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Install security tools
        run: |
          pip install detect-secrets bandit safety

      - name: Run secrets detection
        run: |
          detect-secrets scan --baseline .secrets.baseline --all-files
        continue-on-error: true

      - name: Run security linting with bandit
        run: |
          bandit -r services/ shared/ -f json -o bandit-report.json || true
          bandit -r services/ shared/ --severity-level medium
        continue-on-error: true

      - name: Check for known security vulnerabilities
        run: |
          safety check -r requirements.txt
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            .secrets.baseline

  # Linting and formatting
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run Black formatting check
        run: |
          black --check --diff services/ shared/ tests/
        continue-on-error: true

      - name: Run isort import sorting check
        run: |
          isort --check-only --diff services/ shared/ tests/
        continue-on-error: true

      - name: Run flake8 linting
        run: |
          flake8 services/ shared/ tests/
        continue-on-error: true

  # Basic tests
  test-basic:
    name: Basic Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run basic tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci-only
          ENVIRONMENT: testing
        run: |
          pytest tests/ -v --tb=short
        continue-on-error: true

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker Compose build
        run: |
          docker-compose -f docker-compose.yml build --no-cache
        continue-on-error: true

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [security-checks, lint-and-format, test-basic, docker-build]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Security checks: ${{ needs.security-checks.result }}"
          echo "Lint and format: ${{ needs.lint-and-format.result }}"
          echo "Basic tests: ${{ needs.test-basic.result }}"
          echo "Docker build: ${{ needs.docker-build.result }}"

      - name: Quality gate decision
        run: |
          # Allow some failures but report them
          failed_jobs=0
          
          if [[ "${{ needs.security-checks.result }}" != "success" ]]; then
            echo "⚠️ Security checks had issues"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
            echo "⚠️ Linting and formatting checks had issues"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [[ "${{ needs.test-basic.result }}" != "success" ]]; then
            echo "⚠️ Basic tests had issues"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "⚠️ Docker build had issues"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [[ $failed_jobs -gt 2 ]]; then
            echo "❌ Too many failures ($failed_jobs), blocking pipeline"
            exit 1
          else
            echo "✅ Quality gates passed with $failed_jobs warnings"
          fi

  # Notify results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()

    steps:
      - name: Notify success
        if: needs.quality-gates.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo "Ready for next steps."

      - name: Notify failure
        if: needs.quality-gates.result != 'success'
        run: |
          echo "❌ CI Pipeline failed!"
          echo "Please check the failed jobs and fix the issues."
          exit 1