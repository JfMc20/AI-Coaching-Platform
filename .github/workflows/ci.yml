name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # Security and code quality checks
  security-checks:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install detect-secrets bandit safety

      - name: Run secrets detection
        run: |
          detect-secrets scan --baseline .secrets.baseline --all-files

      - name: Run security linting with bandit
        run: |
          bandit -r services/ shared/ -f json -o bandit-report.json || true
          bandit -r services/ shared/ --severity-level medium

      - name: Check for known security vulnerabilities
        run: |
          pip install poetry
          cd shared && poetry export -f requirements.txt --output requirements.txt
          safety check -r shared/requirements.txt

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            .secrets.baseline

  # Linting and formatting
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install shared dependencies
        run: |
          cd shared
          poetry install

      - name: Run Black formatting check
        run: |
          cd shared
          poetry run black --check --diff .

      - name: Run isort import sorting check
        run: |
          cd shared
          poetry run isort --check-only --diff .

      - name: Run flake8 linting
        run: |
          cd shared
          poetry run flake8 .

  # Test each service
  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, creator-hub-service, ai-engine-service, channel-service]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install shared dependencies
        run: |
          cd shared
          poetry install

      - name: Install service dependencies
        run: |
          cd services/${{ matrix.service }}
          poetry install

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci-only
          OLLAMA_URL: http://localhost:11434
          CHROMADB_URL: http://localhost:8000
          EMBEDDING_MODEL: nomic-embed-text
          CHAT_MODEL: llama2:7b-chat
        run: |
          cd services/${{ matrix.service }}
          poetry run pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=70

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-checks, lint-and-format, test-services]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          cp .env.example .env
          sed -i 's/postgres:postgres@postgres:5432/postgres:postgres@localhost:5432/g' .env
          sed -i 's/redis:6379/localhost:6379/g' .env

      - name: Build services
        run: |
          docker-compose build

      - name: Run integration tests
        run: |
          # TODO: Implement integration tests in subsequent tasks
          echo "Integration tests will be implemented in subsequent tasks"

  # Docker image build and security scan
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: [test-services]
    strategy:
      matrix:
        service: [auth-service, creator-hub-service, ai-engine-service, channel-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.service }}:test services/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [security-checks, lint-and-format, test-services, docker-security]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Security checks: ${{ needs.security-checks.result }}"
          echo "Lint and format: ${{ needs.lint-and-format.result }}"
          echo "Test services: ${{ needs.test-services.result }}"
          echo "Docker security: ${{ needs.docker-security.result }}"

      - name: Quality gate decision
        run: |
          if [[ "${{ needs.security-checks.result }}" != "success" ]]; then
            echo "❌ Security checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
            echo "❌ Linting and formatting checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-services.result }}" != "success" ]]; then
            echo "❌ Service tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.docker-security.result }}" != "success" ]]; then
            echo "⚠️ Docker security scan had issues, but not blocking"
          fi
          
          echo "✅ All quality gates passed!"

  # Notify results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()

    steps:
      - name: Notify success
        if: needs.quality-gates.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo "All quality gates passed. Ready for deployment."

      - name: Notify failure
        if: needs.quality-gates.result != 'success'
        run: |
          echo "❌ CI Pipeline failed!"
          echo "Please check the failed jobs and fix the issues."
          exit 1