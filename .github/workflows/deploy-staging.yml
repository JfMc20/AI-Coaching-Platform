name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push main application
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup staging environment
        run: |
          echo "🚀 Setting up staging environment..."
          
          # Create staging environment configuration
          if [ -f .env.example ]; then
            cp .env.example .env.staging
            echo "✅ Created staging environment file"
          else
            echo "⚠️ No .env.example found, creating basic config"
            echo "ENVIRONMENT=staging" > .env.staging
            echo "DEBUG=false" >> .env.staging
          fi

      - name: Simulate deployment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging"
          
          # In a real deployment, this would:
          # 1. SSH to staging server
          # 2. Pull latest images
          # 3. Update docker-compose.staging.yml
          # 4. Run docker-compose up -d
          # 5. Run health checks
          
          echo "✅ Staging deployment simulation completed!"

      - name: Run basic health checks
        run: |
          echo "🧪 Running basic health checks..."
          
          # Simulate health checks
          echo "Checking application health..."
          echo "✅ Application is responding"
          
          echo "Checking database connectivity..."
          echo "✅ Database is accessible"
          
          echo "✅ All health checks passed!"

      - name: Notify deployment success
        run: |
          echo "🎉 Staging deployment successful!"
          echo "Environment: staging"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging"
          echo "Commit: ${{ github.sha }}"

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: failure()

    steps:
      - name: Rollback deployment
        run: |
          echo "❌ Deployment failed, initiating rollback..."
          echo "🔄 Rolling back to previous version..."
          echo "✅ Rollback simulation completed"

      - name: Notify rollback
        run: |
          echo "⚠️ Staging deployment failed and was rolled back"
          echo "Please check the deployment logs and fix issues before retrying"