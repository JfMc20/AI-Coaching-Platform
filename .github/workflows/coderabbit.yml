name: CodeRabbit AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  coderabbit-review:
    name: CodeRabbit AI Review
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: CodeRabbit Review
        uses: coderabbitai/coderabbit-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Configure review settings
          review_level: 'comprehensive'  # Options: basic, standard, comprehensive
          focus_areas: |
            - security
            - performance
            - maintainability
            - best_practices
            - documentation
          exclude_patterns: |
            - "*.lock"
            - "*.min.js"
            - "*.min.css"
            - "node_modules/**"
            - ".git/**"
          language_specific_rules:
            python:
              - check_pep8_compliance
              - check_security_vulnerabilities
              - check_performance_issues
              - check_code_complexity
            dockerfile:
              - check_security_best_practices
              - check_image_optimization
            yaml:
              - check_syntax_errors
              - check_security_configurations

  # Additional code quality checks for PR
  pr-quality-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install analysis tools
        run: |
          pip install radon complexity-report bandit safety

      - name: Analyze code complexity
        run: |
          echo "## Code Complexity Analysis" >> pr_analysis.md
          echo "" >> pr_analysis.md
          
          # Cyclomatic complexity
          radon cc services/ shared/ -a -nb >> pr_analysis.md
          echo "" >> pr_analysis.md
          
          # Maintainability index
          echo "### Maintainability Index" >> pr_analysis.md
          radon mi services/ shared/ -nb >> pr_analysis.md
          echo "" >> pr_analysis.md

      - name: Security analysis
        run: |
          echo "### Security Analysis" >> pr_analysis.md
          bandit -r services/ shared/ -f txt >> pr_analysis.md || true
          echo "" >> pr_analysis.md

      - name: Check for TODO/FIXME comments
        run: |
          echo "### TODO/FIXME Comments" >> pr_analysis.md
          echo "" >> pr_analysis.md
          
          # Find TODO and FIXME comments in changed files
          git diff --name-only origin/main...HEAD | xargs grep -n "TODO\|FIXME\|XXX\|HACK" || echo "No TODO/FIXME comments found" >> pr_analysis.md
          echo "" >> pr_analysis.md

      - name: Comment PR with analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const analysis = fs.readFileSync('pr_analysis.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🤖 Automated Code Analysis\n\n${analysis}\n\n---\n*This analysis was generated automatically. Please review the findings and address any issues before merging.*`
              });
            } catch (error) {
              console.log('No analysis file found or error reading it:', error);
            }

  # Check for breaking changes
  breaking-changes-check:
    name: Breaking Changes Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for breaking changes
        run: |
          echo "## Breaking Changes Analysis" > breaking_changes.md
          echo "" >> breaking_changes.md
          
          # Check for API changes in OpenAPI specs
          if git diff --name-only origin/main...HEAD | grep -E "(openapi|swagger)" > /dev/null; then
            echo "⚠️ **API specification changes detected**" >> breaking_changes.md
            echo "Please ensure backward compatibility or update API version." >> breaking_changes.md
            echo "" >> breaking_changes.md
          fi
          
          # Check for database schema changes
          if git diff --name-only origin/main...HEAD | grep -E "(migration|schema|alembic)" > /dev/null; then
            echo "⚠️ **Database schema changes detected**" >> breaking_changes.md
            echo "Please ensure migrations are backward compatible." >> breaking_changes.md
            echo "" >> breaking_changes.md
          fi
          
          # Check for environment variable changes
          if git diff --name-only origin/main...HEAD | grep -E "(.env.example|docker-compose)" > /dev/null; then
            echo "⚠️ **Environment configuration changes detected**" >> breaking_changes.md
            echo "Please update deployment documentation if needed." >> breaking_changes.md
            echo "" >> breaking_changes.md
          fi
          
          # Check for dependency changes
          if git diff --name-only origin/main...HEAD | grep -E "(pyproject.toml|requirements|poetry.lock)" > /dev/null; then
            echo "⚠️ **Dependency changes detected**" >> breaking_changes.md
            echo "Please ensure all services are compatible with new dependencies." >> breaking_changes.md
            echo "" >> breaking_changes.md
          fi

      - name: Comment on breaking changes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const breakingChanges = fs.readFileSync('breaking_changes.md', 'utf8');
              
              if (breakingChanges.length > 50) { // More than just the header
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## 🚨 Breaking Changes Detection\n\n${breakingChanges}\n\n---\n*Please review these potential breaking changes carefully before merging.*`
                });
              }
            } catch (error) {
              console.log('No breaking changes file found or error reading it:', error);
            }