# Docker Compose Configuration - Enhanced for Production Readiness
# Version: 2.0
# Improvements: Centralized logging, resource limits, secrets management,
#               optimized build contexts, and flexible port mapping.

# ===================================================================
#  YAML Anchors for Reusable Configurations
# ===================================================================
x-common-variables: &common-variables
  POSTGRES_DB: ${POSTGRES_DB:-ai_platform_dev}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}

x-database-url: &database-url
  DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-ai_platform_dev}

x-logging-defaults: &logging-defaults 
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-resource-limits: &resource-limits 
  resources:
    limits:
      cpus: '0.75'
      memory: 512M
    reservations:
      cpus: '0.25'
      memory: 256M

x-ollama-resource-limits: &ollama-resource-limits
  resources:
    limits:
      cpus: '1.0'
      memory: 2G
    reservations:
      cpus: '0.5'
      memory: 1G

x-service-defaults: &service-defaults
  networks:
    - mvp-network
  restart: unless-stopped
  logging: *logging-defaults

x-app-service-defaults: &app-service-defaults
  <<: *service-defaults
  deploy: *resource-limits
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

# ===================================================================
#  Services Definition
# ===================================================================
services:
  # -------------------- Database & Cache Services --------------------
  postgres:
    image: postgres:15-alpine
    container_name: mvp-postgres
    environment: *common-variables
    ports:
      - "${POSTGRES_PORT:-5432}:5432" 
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    <<: *service-defaults

  redis:
    image: redis:7-alpine
    container_name: mvp-redis
    ports:
      - "${REDIS_PORT:-6379}:6379" 
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    <<: *service-defaults

  # -------------------- AI/ML Services --------------------
  ollama:
    image: ollama/ollama:latest
    container_name: mvp-ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434" 
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy: *ollama-resource-limits 
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pgrep ollama > /dev/null || exit 1"]
    <<: *service-defaults

  chromadb:
    image: chromadb/chroma:0.4.24
    container_name: mvp-chromadb
    ports:
      - "${CHROMADB_PORT:-8000}:8000" # <-- MEJORA: Puerto flexible
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/server.htpasswd
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic.BasicAuthServerProvider
      - ANONYMIZED_TELEMETRY=False
      - ALLOW_RESET=True
    deploy: *resource-limits # <-- MEJORA: Limitar recursos de IA
    healthcheck:
      test: ["CMD-SHELL", "python3 -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v1/heartbeat')\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    <<: *service-defaults

  # -------------------- Application Services --------------------
  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    container_name: mvp-auth-service
    ports:
      - "${AUTH_SERVICE_PORT:-8001}:8001" 
    secrets: 
      - jwt_secret_key
    environment:
      <<: *database-url
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      JWT_SECRET_KEY_FILE: /run/secrets/jwt_secret_key 
      PORT: 8001
      DB_AUTO_CREATE: "true"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "python3", "/usr/local/bin/healthcheck.py"]
    <<: *app-service-defaults

  creator-hub-service:
    build:
      context: .
      dockerfile: ./services/creator-hub-service/Dockerfile
    container_name: mvp-creator-hub-service
    ports:
      - "${CREATOR_HUB_PORT:-8002}:8002" 
    environment:
      <<: *database-url
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/1}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL:-http://auth-service:8001}
      AI_ENGINE_SERVICE_URL: ${AI_ENGINE_SERVICE_URL:-http://ai-engine-service:8003}
      PORT: 8002
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
    depends_on:
      auth-service:
        condition: service_healthy
    <<: *app-service-defaults

  ai-engine-service:
    build:
      context: .
      dockerfile: ./services/ai-engine-service/Dockerfile
    container_name: mvp-ai-engine-service
    ports:
      - "${AI_ENGINE_PORT:-8003}:8003"
    environment:
      <<: *database-url
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/2}
      OLLAMA_URL: ${OLLAMA_URL:-http://ollama:11434}
      CHROMADB_URL: ${CHROMADB_URL:-http://chromadb:8000}
      PORT: 8003
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
    depends_on:
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    <<: *app-service-defaults

  channel-service:
    build:
      context: .
      dockerfile: ./services/channel-service/Dockerfile
    container_name: mvp-channel-service
    ports:
      - "${CHANNEL_SERVICE_PORT:-8004}:8004" 
    environment:
      <<: *database-url
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/3}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL:-http://auth-service:8001}
      AI_ENGINE_SERVICE_URL: ${AI_ENGINE_SERVICE_URL:-http://ai-engine-service:8003}
      PORT: 8004
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
    depends_on:
      auth-service:
        condition: service_healthy
      ai-engine-service:
        condition: service_healthy
    <<: *app-service-defaults

  # -------------------- API Gateway --------------------
  nginx:
    image: nginx:alpine
    container_name: mvp-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"   
      - "${NGINX_HTTPS_PORT:-443}:443" 
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      auth-service:
        condition: service_healthy
      creator-hub-service:
        condition: service_healthy
      ai-engine-service:
        condition: service_healthy
      channel-service:
        condition: service_healthy
    <<: *service-defaults

# ===================================================================
#  Volumes and Networks
# ===================================================================
volumes:
  postgres_data:
  redis_data:
  ollama_data:
  chromadb_data:
  uploads_data:

networks:
  mvp-network:
    driver: bridge

# ===================================================================
#  Secrets Management
# ===================================================================
secrets:
  jwt_secret_key:
    file: ./secrets/jwt_secret.txt
