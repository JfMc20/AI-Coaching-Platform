{
  "info": {
    "name": "Auth Service - MVP Coaching AI Platform",
    "description": "Complete test collection for Auth Service endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url_auth}}"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'healthy');",
                  "    pm.expect(jsonData).to.have.property('service', 'auth-service');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "});",
                  "",
                  "pm.test('Response time is less than 200ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ready",
              "host": ["{{base_url}}"],
              "path": ["ready"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 503', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 503]);",
                  "});",
                  "",
                  "pm.test('Response has checks object', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('checks');",
                  "    pm.expect(jsonData.checks).to.have.property('database');",
                  "    pm.expect(jsonData.checks).to.have.property('jwt_config');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has service info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('docs', '/docs');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication Flow",
      "item": [
        {
          "name": "Register Creator",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"full_name\": \"{{test_full_name}}\",\n  \"company_name\": \"{{test_company_name}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201 or 409', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test('Registration successful', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('creator');",
                  "        pm.expect(jsonData).to.have.property('tokens');",
                  "        ",
                  "        // Store tokens for subsequent requests",
                  "        pm.environment.set('jwt_token', jsonData.tokens.access_token);",
                  "        pm.environment.set('refresh_token', jsonData.tokens.refresh_token);",
                  "        pm.environment.set('creator_id', jsonData.creator.id);",
                  "    });",
                  "} else if (pm.response.code === 409) {",
                  "    pm.test('Email already exists', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.detail).to.include('already registered');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login Creator",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('creator');",
                  "    pm.expect(jsonData).to.have.property('tokens');",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    pm.environment.set('jwt_token', jsonData.tokens.access_token);",
                  "    pm.environment.set('refresh_token', jsonData.tokens.refresh_token);",
                  "    pm.environment.set('creator_id', jsonData.creator.id);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current Creator Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile data is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email', pm.environment.get('test_email'));",
                  "    pm.expect(jsonData).to.have.property('full_name');",
                  "    pm.expect(jsonData).to.have.property('is_active', true);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New tokens received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('refresh_token');",
                  "    pm.expect(jsonData).to.have.property('token_type', 'bearer');",
                  "    ",
                  "    // Update tokens",
                  "    pm.environment.set('jwt_token', jsonData.access_token);",
                  "    pm.environment.set('refresh_token', jsonData.refresh_token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Password Management",
      "item": [
        {
          "name": "Validate Password Strength",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"TestPassword123!\",\n  \"personal_info\": {\n    \"email\": \"test@example.com\",\n    \"name\": \"Test User\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/password/validate",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "password", "validate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Password validation response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('strength');",
                  "    pm.expect(jsonData).to.have.property('score');",
                  "    pm.expect(jsonData).to.have.property('is_valid');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Request Password Reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/password/reset/request",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "password", "reset", "request"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test('Reset request accepted', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Security Tests",
      "item": [
        {
          "name": "Invalid Token Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Missing Authorization Header",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}